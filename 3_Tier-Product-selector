<section class="diffuser_container">
  <div class="diffuser_sub_container">
    <div class="left_section">
      <div class="discount-el"> - {{ section.settings.discount_percentage }}%</div>
      <div class="carousel-container">
        <img class="selected-products-image fade-img" src="" alt="Selected Images" />
        <button class="carousel-btn prev" aria-label="Previous">
         <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 64 64" height="64" width="64">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="5.33333" stroke="black" d="M40 50.6667L21.3333 32L40 13.3334"/>
        </svg>
        </button>

        <div class="carousel">
          {% assign image_urls = section.settings.carousel_images | split: ',' %}
          {% for url in image_urls %}
            {% assign trimmed_url = url | strip %}
            {% if trimmed_url != blank %}
              <div class="carousel-slide">
                <img id="main-image" src="{{ trimmed_url }}" alt="Carousel Image {{ forloop.index }}">
              </div>
            {% endif %}
          {% endfor %}
        </div>

        <button class="carousel-btn next" aria-label="Next">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 64 64" height="64" width="64">
          <path stroke-linejoin="round" stroke-linecap="round" stroke-width="5.33333" stroke="black" d="M24 13.3334L42.6667 32L24 50.6667"/>
        </svg>
        </button>
      </div>
    </div>

    <div class="right_section">
      <div class="pdt-price-details">
        <h1 class="diffuser_title">{{ section.settings.section_title }}</h1>
       <span class="pdt-price">{{ product.price | money }}</span>
      </div>
      <!-- loox-star-rating -->
        {% assign diffusers = section.settings.diffuser %}
        {% for product in diffusers %}
      <div class="custom_loox_star_rating"><a href="#looxReviews"><div class="loox-rating" data-id="{{ product.id }}" 
    data-rating="{{ product.metafields.loox.avg_rating }}" data-raters="{{ product.metafields.loox.num_reviews }}"></div>
      </a>
      </div>
      {% endfor %}
      <div class="p-inner">


                <div class="circle-tags">
              {% assign feature_list = section.settings.circle_text | split: "," %}
          <ul>
            {% for feature in feature_list %}
              <li><span><img src="https://cdn.shopify.com/s/files/1/0277/5859/2073/files/teenyicons_tick-solid.svg?v=1749893913"></span>{{ feature | strip }}</li>
            {% endfor %}
          </ul>
        </div>
        

      <div class="single-quote">
        <div>
        {{ section.settings['section-quote'] }}
        <!-- <svg class="single-review-quote-left" width="14" height="11" viewBox="0 0 14 11" fill="none" xmlns="http://www.w3.org/2000/svg"> <g clip-path="url(#clip0_2625_67)"> <path d="M6.08555 0.897739L5.56818 0.13385C1.98864 2.44446 0 5.25191 0 7.56252C0 9.79674 1.71055 10.8472 3.16209 10.8472C4.99164 10.8472 6.28409 9.35735 6.28409 7.79168C6.28409 6.47413 5.40909 5.34724 4.23564 4.92679C3.89773 4.81191 3.57955 4.71657 3.57955 4.16291C3.57955 3.45646 4.11664 2.40657 6.08555 0.897739ZM13.9803 0.897739L13.4629 0.13385C9.92282 2.44446 7.89473 5.25191 7.89473 7.56252C7.89473 9.79674 9.64473 10.8472 11.0963 10.8472C12.9455 10.8472 14.2584 9.35735 14.2584 7.79168C14.2584 6.47413 13.3636 5.34724 12.1501 4.92679C11.8122 4.81191 11.5137 4.71657 11.5137 4.16291C11.5137 3.45646 12.0705 2.40596 13.9796 0.897128L13.9803 0.897739Z" fill="#EDDED0"></path> </g> <defs> <clipPath id="clip0_2625_67"> <rect width="14" height="11" fill="white"></rect> </clipPath> </defs> </svg>
        <svg class="single-review-quote-right" width="14" height="11" viewBox="0 0 14 11" fill="none" xmlns="http://www.w3.org/2000/svg"> <g clip-path="url(#clip0_2625_67)"> <path d="M6.08555 0.897739L5.56818 0.13385C1.98864 2.44446 0 5.25191 0 7.56252C0 9.79674 1.71055 10.8472 3.16209 10.8472C4.99164 10.8472 6.28409 9.35735 6.28409 7.79168C6.28409 6.47413 5.40909 5.34724 4.23564 4.92679C3.89773 4.81191 3.57955 4.71657 3.57955 4.16291C3.57955 3.45646 4.11664 2.40657 6.08555 0.897739ZM13.9803 0.897739L13.4629 0.13385C9.92282 2.44446 7.89473 5.25191 7.89473 7.56252C7.89473 9.79674 9.64473 10.8472 11.0963 10.8472C12.9455 10.8472 14.2584 9.35735 14.2584 7.79168C14.2584 6.47413 13.3636 5.34724 12.1501 4.92679C11.8122 4.81191 11.5137 4.71657 11.5137 4.16291C11.5137 3.45646 12.0705 2.40596 13.9796 0.897128L13.9803 0.897739Z" fill="#EDDED0"></path> </g> <defs> <clipPath id="clip0_2625_67"> <rect width="14" height="11" fill="white"></rect> </clipPath> </defs> </svg>
        -->
        </div> 
      </div>

        <div class="feature-list">
              {% assign feature_list = section.settings.feature_text | split: ",," %}
          <ul>
            {% for feature in feature_list %}
              <li><span><img src="https://cdn.shopify.com/s/files/1/0277/5859/2073/files/Vector.svg?v=1749893857"></span>{{ feature | strip }}</li>
            {% endfor %}
          </ul>
        </div>





<div id="product-selector-widget" style="max-width: 600px; margin: 2rem auto; font-family: system-ui, sans-serif;" data-currency="{{ shop.currency }}">








     <div class="product_varaiants_sub ">
      <h3 class="selector-title">{{ section.settings.product-list-1-title }}<span id="selected-product-name"></span></h3>
      <div class="diffuser_variants">
        {% assign diffusers = section.settings.diffuser %}
        {% for product in diffusers %}
          {% if product.variants.size > 1 %}
            {% for variant in product.variants %}
              {% if variant.image %}
                <div class="swatch-wrapper {% unless variant.available %}out-of-stock{% endunless %}">
                  <img
                    class="diffuser_img_swatch product-option"
                    src="{{ variant.image.src | img_url: 'medium' }}"
                    alt="{{ variant.title }}"
                    data-image="{{ variant.image.src | img_url: 'master' }}"
                    data-product-name="{{ variant.title }}"
                    data-product-id="{{ variant.id }}"
                    data-product-price="{{ variant.price | money_without_currency }}"
                    data-product-unfiltered-price="{{ variant.price}}"
                    data-product-unfiltered-compareatprice="{{ variant.compare_at_price}}"
                  >
                </div>
              {% else %}
                <p>No image available</p>
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      </div>
    </div> 

  

  {%- comment -%}
    ─── GROUP #1: “01. Car Diffuser” (single‐select) 
  <div class="selector-group open" data-max="1" data-label="01. Car Diffuser">
    <!-- OUTER HEADER (collapsed by default) -->
    <div class="selector-header">
      <span class="selector-title">Diffuser</span>
      <span class="selector-state"></span>
      <span class="selector-icon">+</span>
    </div>
    <!-- OUTER CONTENT: contains inner dropdown -->
    <div class="selector-content">
      <div class="inner-dropdown">
        <div class="inner-dropdown-header">(Please Select)</div>
        <div class="inner-dropdown-options">
          {% assign diffusers = section.settings.diffuser %}
          {% for product in diffusers %}
            {% if product.variants.size > 1 %}
              {% for variant in product.variants %}
                <div class="product-option {% unless variant.available %}disabled{% endunless %} no-show-img"
                  data-image="{{ variant.image.src | img_url: 'master' }}"
                  data-product-name="{{ variant.title }}"
                  data-product-id="{{ variant.id }}"
                  data-product-price="{{ variant.price | money_without_currency }}"
                  {% unless variant.available %}data-disabled="true"{% endunless %}>
                  {{ variant.title }}
                  {% unless variant.available %}
                    <span class="out-of-stock-label"> (Out of stock)</span>
                  {% endunless %}
                </div>
              {% endfor %}
            {% endif %}
          {% endfor %}
        </div>
      </div>
    </div>

  </div>
  {%- endcomment -%}

  {%- comment -%}
    ─── GROUP #2: “02. Category 2” (two‐select)
  {%- endcomment -%}
<div class="selector-group" data-max="2" data-label="02. Category 2" >
  <div class="selector-header">
    <div class="top-content" style="
        display: flex;
        justify-content: space-between;
    ">
      <span class="selector-title">{{ section.settings.product-list-2-title }}</span>
      <span class="selector-icon">+</span>
    </div>   
    <span class="selector-state"></span>
  </div>
  <div class="selector-content">
    <div class="inner-dropdown">
      <div class="inner-dropdown-header">(Please Select)</div>
      <div class="inner-dropdown-options">
        {% assign single_oil_products = section.settings.single_oil_products %}
        {% for product in single_oil_products %}
          {% assign variant = product.variants.first %}
          <div class="product-option {% unless variant.available %}disabled{% endunless %}" 
            data-image="{{ product.images.first.src | img_url: 'master' }}"
            data-product-name="{{ product.title }}"
            data-product-id="{{ variant.id }}"
            data-product-price="{{ variant.price | money_without_currency }}"
            data-product-unfiltered-price="{{ variant.price}}"
            data-product-unfiltered-compareatprice="{{ variant.compare_at_price}}"
            {% unless variant.available %}data-disabled="true"{% endunless %}>
            {{ product.title }}
            {% unless variant.available %}
              <span class="out-of-stock-label"> (Out of stock)</span>
            {% endunless %}
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
</div>


  {%- comment -%}
    ─── GROUP #3: “03. Category 3” (two‐select)
  {%- endcomment -%}
<div class="selector-group" data-max="2" data-label="03. Category 3">
  <div class="selector-header">
    <div class="top-content" style="
        display: flex;
        justify-content: space-between;
    ">
      <span class="selector-title">{{ section.settings.product-list-3-title }}</span>
      <span class="selector-icon">+</span>
    </div>   
    <span class="selector-state"></span>
  </div>
  <div class="selector-content">
    <div class="inner-dropdown">
      <div class="inner-dropdown-header">(Please Select)</div>
      <div class="inner-dropdown-options">
        {% assign blend_oil_product = section.settings.blend_oil_products %}
        {% for product in blend_oil_product %}
          {% assign variant = product.variants.first %}
          <div class="product-option {% unless variant.available %}disabled{% endunless %}" 
            data-image="{{ product.images.first.src | img_url: 'master' }}"
            data-product-name="{{ product.title }}"
            data-product-id="{{ variant.id }}"
            data-product-price="{{ variant.price | money_without_currency }}"
            data-product-unfiltered-price="{{ variant.price}}"
            data-product-unfiltered-compareatprice="{{ variant.compare_at_price}}"
            {% unless variant.available %}data-disabled="true"{% endunless %}>
            {{ product.title }}
            {% unless variant.available %}
              <span class="out-of-stock-label"> (Out of stock)</span>
            {% endunless %}
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
</div>


</div>










      <div class="tab_nav">
        <div class="tabs_nav_item_list">
          {% for block in section.blocks %} 
            {% if block.type == 'tab_item' %}
            <button class="tabs_heading {% if forloop.first %}active{% endif %}" data-tab="{{ forloop.index0 }}">
              {{ block.settings.heading }}
            </button>
           {% endif %}
          {% endfor %}
        </div>

        <div class="tabs_nav_item_description">
          {% for block in section.blocks %}
             {% if block.type == 'tab_item' %}
            <div
              class="tab_content"
              data-tab-content="{{ forloop.index0 }}"
              style="{% if forloop.first %}display:block{% else %}display:none{% endif %}"
            >
              {{ block.settings.description }}
            </div>
           {% endif %}
          {% endfor %}
        </div>
      </div>

      <div class="add_to_cart parent">
          <button id="add-to-cart-btn-id" >ADD TO CART</button>
        <span class="loader-button__loader" hidden="">
        <div class="spinner">
          <svg focusable="false" width="24" height="24" class="icon icon--spinner" viewBox="25 25 50 50">
            <circle cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="5"></circle>
          </svg>
        </div>
      </span>
      </div>


      <div class="accordion">
        {% for block in section.blocks %}
          {% if block.type == 'accordian_item' %}
            <div class="accordion-item">
              <div class="accordion-header">
                <div class="accordion-heading-wrapper">
                  {% if block.settings['accordian_item-icon'] != blank %}
                    <img
                      src="{{ block.settings.accordian_item-icon | image_url }}"
                      alt="Accordion icon"
                      width="24"
                      height="24"
                    >
                  {% endif %}
                  <span>{{ block.settings['accordian_item-heading'] }}</span>
                </div>
                <span class="accordion-toggle">+</span>
              </div>
              <div class="accordion-content">
                {{ block.settings['accordian_item-description'] }}
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>
</div>
      
    </div>
  </div>
</section>


<script>

  
document.addEventListener("DOMContentLoaded", () => {
  const selectorGroups = document.querySelectorAll(".selector-group");
  const addToCartBtn = document.getElementById('add-to-cart-btn-id');
  const selectedImgContainer = document.querySelector('.selected-products-image');
  const selectedProductTierFirst = document.querySelector('#selected-product-name');


      // Select diffuser (1 only)
    const diffuserSelectOne = document.querySelectorAll('.diffuser_img_swatch');
    diffuserSelectOne.forEach((diffuserItem) => {
      diffuserItem.addEventListener('click', () => {
        if (diffuserItem.closest('.swatch-wrapper').classList.contains('out-of-stock')){
          console.log('No product')
          return;
        } 
        
        diffuserSelectOne.forEach((item) => {
          item.classList.remove('selected');
          item.removeAttribute('data-selected-product');
          
        });
        diffuserItem.classList.add('selected');
        diffuserItem.setAttribute('data-selected-product',"true");
        selectedDiffuser = diffuserItem.getAttribute('data-product-id');
        selectedProductTierFirst.textContent = `: ${diffuserItem.getAttribute("data-product-name")}`
        updatePriceAndButton();
      });
    });

  
  selectorGroups.forEach(group => {
    const maxSel = parseInt(group.dataset.max, 10);
    const outerHeader = group.querySelector(".selector-header");
    const stateSpan = outerHeader.querySelector(".selector-state");
    const iconSpan = outerHeader.querySelector(".selector-icon");
    const innerHeader = group.querySelector(".inner-dropdown-header");
    const optionsBox = group.querySelector(".inner-dropdown-options");
    const productOptions = optionsBox.querySelectorAll(".product-option");

    let selectionQueue = [];
    let totalPrice = 0;


    // OUTER HEADER CLICK: toggle dropdown
    outerHeader.addEventListener("click", (ev) => {
      if (ev.target.matches(".edit-link")) return;

      const isOpen = group.classList.contains("open");
      if (isOpen) {
        group.classList.remove("open");
        innerHeader.classList.remove("active");
        optionsBox.classList.remove("open");
      } else {
        group.classList.add("open");
      }
    });

    // INNER HEADER CLICK: toggle product options dropdown
    innerHeader.addEventListener("click", (ev) => {
      ev.stopPropagation();
      const isActive = innerHeader.classList.contains("active");
      if (isActive) {
        innerHeader.classList.remove("active");
        optionsBox.classList.remove("open");
      } else {
        innerHeader.classList.add("active");
        optionsBox.classList.add("open");
      }
    });

    // OPTION CLICK: handle select/deselect
    productOptions.forEach(optionEl => {
      optionEl.addEventListener("click", (ev) => {
        ev.stopPropagation();
        const wasSelected = optionEl.getAttribute("data-selected-product") === "true";
        const imgUrl = optionEl.getAttribute("data-image");

        if (selectionQueue.length >= maxSel || wasSelected) {
          const elExists = selectionQueue.findIndex(el => el.optionEl === optionEl);
          if (elExists !== -1) {
            console.log("this is called")
            selectionQueue = [{...selectionQueue[elExists],quan: 2}]
          }else{
            const oldest = selectionQueue.shift();
          }
        }

        if (!wasSelected){
          selectionQueue.length && (selectionQueue[0].quan = 1);
          selectionQueue.push({optionEl,quan: 1});
        }

        
        productOptions.forEach(el=>{
          const data = selectionQueue.find(selEl => el === selEl.optionEl)
            ? { exists: true, selEl: selectionQueue.find(selEl => el === selEl.optionEl) }
            : { exists: false };

          if (data.exists) {
            el.setAttribute("data-selected-product", "true");
            el.classList.add("selected");
            el.setAttribute("data-set-quantity",data.selEl.quan)
          }else{
             el.removeAttribute("data-selected-product", "true");
             el.classList.remove("selected");
             el.removeAttribute("data-set-quantity")
          }
        })

        updateInnerHeader();
        updateOuterHeader();

        // Auto-close when max reached
        if (selectionQueue.length === maxSel) {
          innerHeader.classList.remove("active");
          optionsBox.classList.remove("open");
          group.classList.remove("open");
        }

        // After selection logic is done
        updatePriceAndButton();

        if (!optionEl.classList.contains("no-show-img")) showSelectedProductImage(imgUrl)
        console.log("selectionQueue",selectionQueue)
      });
    });

    function showSelectedProductImage (imgUrl) {
      selectedImgContainer.src = imgUrl;
      selectedImgContainer.classList.remove("show"); 
      
      // Force reflow to restart animation
      void selectedImgContainer.offsetWidth;
      
      selectedImgContainer.classList.add("show");
    }

    function updateInnerHeader() {
      const pickedNames = selectionQueue.map(el => el.optionEl.textContent.trim()).join(", ");
      const areMultiple = selectionQueue[0].quan == 2 ? " (2)" : ""
      innerHeader.textContent = pickedNames.length ? pickedNames + areMultiple : "";
    }

    function updateOuterHeader() {
      if (selectionQueue.length === 0) {
        stateSpan.textContent = "";
        iconSpan.textContent = "+";
        iconSpan.style.textDecoration = "none";
      } else {
        const pickedNames = selectionQueue.map(el => el.optionEl.textContent.trim()).join(", ");
        const areMultiple = selectionQueue[0].quan == 2 ? " (2)" : ""
        stateSpan.innerHTML = " <b>" + pickedNames + areMultiple + "</b> ";
        iconSpan.textContent = "Edit";
        iconSpan.style.textDecoration = "underline";
      }
    }

    // EDIT LINK: reopen for reselection
    outerHeader.addEventListener("click", (ev) => {
      if (ev.target.matches(".edit-link")) {
        ev.preventDefault();
        ev.stopPropagation();
        group.classList.add("open");
        innerHeader.classList.add("active");
        optionsBox.classList.add("open");
      }
    });

    // CLICK OUTSIDE: close dropdowns
    document.addEventListener("click", (ev) => {
      if (!group.contains(ev.target)) {
        group.classList.remove("open");
        innerHeader.classList.remove("active");
        optionsBox.classList.remove("open");
      }
    });
  });

  // function updatePriceAndButton() {
  //   // Reset price
  //   totalPrice = 0;
  //   console.log("%",{{ section.settings.discount_percentage }})
  
  //   // Recalculate from all selected options
  //   document.querySelectorAll('.product-option[data-selected-product="true"]').forEach(opt => {
  //     const price = parseFloat(opt.getAttribute('data-product-price') || 0) * parseFloat(opt.getAttribute('data-set-quantity') || 1);

  //     totalPrice += price;
  //   });
  //     console.log("price;",totalPrice)
  //   const discountedPrice = parseFloat((totalPrice - (totalPrice * ({{ section.settings.discount_percentage }} / 100))).toFixed(2));

  //   // Update button text
  //   if (addToCartBtn) {
  //     addToCartBtn.innerHTML = `ADD TO CART ${totalPrice > 0 ? "- {{ shop.currency }} "+discountedPrice : ""}`;
  //   }
  // }
  function updatePriceAndButton() {
    // Reset price
    totalPrice = 0;
  
    // Recalculate from all selected options
    document.querySelectorAll('.product-option[data-selected-product="true"]').forEach(opt => {
      const price = parseFloat(opt.getAttribute('data-product-unfiltered-price') || 0) * parseFloat(opt.getAttribute('data-set-quantity') || 1);

      totalPrice += price;
    });
    const discountedPrice = Math.floor( parseFloat((totalPrice - (totalPrice * ({{ section.settings.discount_percentage }} / 100))).toFixed(2)) / 100 );
      console.log("Dprice;",discountedPrice)

    // Update button text
    if (addToCartBtn) {
      addToCartBtn.innerHTML = `ADD TO CART ${totalPrice > 0 ? "- {{ cart.currency.iso_code}} "+discountedPrice : ""}`;
    }
  }






      addToCartBtn.addEventListener('click', async (e) => {
        e.preventDefault();
  
        addToCartBtn.innerHTML = `<svg class="spinner" width="24" height="24" viewBox="0 0 50 50">
        <circle 
          cx="25" cy="25" r="20" 
          fill="none" 
          stroke="white" 
          stroke-width="5" 
          stroke-linecap="round"
          stroke-dasharray="100, 200"
        >
          <animateTransform 
            attributeName="transform" 
            type="rotate" 
            from="0 25 25" 
            to="360 25 25" 
            dur="1s" 
            repeatCount="indefinite" />
        </circle>
      </svg>`
  
    
    try {
      const selectedProductIds = [];
      
      const selectedProducts = document.querySelectorAll('.product-option[data-selected-product="true"]');

      let totalQuan = 0;

      selectedProducts.forEach(pdt=>{
        totalQuan += parseFloat(pdt.getAttribute("data-set-quantity") || 1);
        const id = parseInt(pdt.getAttribute("data-product-id"));
        if (!isNaN(id)) {
          selectedProductIds.push({id,quantity:pdt.getAttribute("data-set-quantity")});
        }
      })

      
      
      if (totalQuan < 5){
          addToCartBtn.innerHTML = "INCOMPLETE SELECTION";
          setTimeout(() => {
            addToCartBtn.innerHTML = "ADD TO CART";
          }, 2000);
        return;
      }
  
    
  
      
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json'
        },
        body: JSON.stringify({ items: selectedProductIds }),
      });
      
      if (!response.ok) {
        const text = await response.text();
        throw new Error(`HTTP ${response.status}: ${text}`);
      }
  

      (async () => {
        const cartDrawer = document.querySelector('cart-drawer');
        if (!cartDrawer || typeof cartDrawer._rerenderCart !== 'function') {
          console.warn('cart-drawer or _rerenderCart method not found.');
          return;
        }
      
        const sectionId = cartDrawer.getAttribute('section') || 'mini-cart';
        const response = await fetch(`/cart?section_id=${sectionId}`);
        const html = await response.text();
      
        const event = new CustomEvent("cart:refresh", {
          detail: {
            cart: {
              sections: {
                [sectionId]: html
              },
              item_count: 1
            },
            openMiniCart: true
          }
        });
      
        await cartDrawer._rerenderCart(event);
        addToCartBtn.innerHTML = "ADD TO CART";
        totalQuan = 0
  
    
      })();
 
    } catch (error) {
      console.error('Error adding items to cart:', error);
    }finally{

    }
  });

  // TO ADD DISCOUNT TO PRODUCTS BOUGHT ONLY FROM THIS PAGE
  fetch('/discount/{{section.settings.discount_code}}')
  
});
</script>






<style>

  .discount-el{
    position: absolute;
    top: 50px;
    right: 50px;
    color: white;
    font-weight: 700;
    z-index: 9;
    border-radius: 50px;
    padding: 5px 10px;
    font-size: 9px;
    font-family: 'Pangram';
    background: #E43044;
  }
  .diffuser_container .custom_loox_star_rating{
    padding: 0 0 12px;
  }
 .fade-img {
  opacity: 0;
  pointer-events: none;
  position: absolute;
  transition: none;
}

.fade-img.show {
  animation: fadeInOut 3s ease-in-out forwards;
}

@keyframes fadeInOut {
  0% {
    opacity: 0;
    transform: scale(0.95);
  }
  20% {
    opacity: 1;
    transform: scale(1);
  }
  80% {
    opacity: 1;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform: scale(0.95);
  }
}

  .selected-products-image{
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 99;
    background: white;
  }
/* RESET + BASE */
#product-selector-widget {
  font-family: system-ui, sans-serif;
  max-width: 600px;
  margin: 2rem auto;
  font-size: 15px;
  color: #222;
}

/* ───────── OUTER HEADER ───────── */
.selector-header {
  /* display: flex;
  align-items: baseline;
  justify-content: space-between;
  padding: 0.75rem 0;
  cursor: pointer; */
  display: flex;
  justify-content: space-between;
  padding: 0.75rem 0;
  cursor: pointer;
  flex-flow: column;
  gap: 6px;
}
.selector-header:hover {
  background: #f8f8f8;
}
  .selector-header .top-content{
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
.selector-title {
  font-weight: 400;
  margin-right: 0.5rem;
  font-size: 14px;
  white-space: nowrap;
  font-weight: bold;
  margin-top: 6px;
  color: rgb(var(--text-color));
}
.selector-state {
    font-weight: 500;
    text-transform: uppercase;
    margin-right: auto;
    font-size: 12px;
    margin: auto auto 0 0;
}
.selector-icon {
  font-size: 17.5px;
  margin-left: 0.5rem;
  white-space: nowrap;
  font-weight: 500;
}

/* ✔ checkmark and “Edit” */
.selector-header::before {
  content: "✓";
  margin-right: 8px;
  font-weight: 400;
  color: #000;
  display:none;
}
.selector-header .edit-link {
  margin-left: 1rem;
  font-size: 13px;
  text-decoration: underline;
  color: #333;
}
.selector-header .edit-link:hover {
  text-decoration: none;
}

/* ───────── OUTER CONTENT ───────── */
.selector-group {
    border-top: 1px solid #ccc;
    border-bottom: 1px solid #ccc;
}
.selector-content {
  display: none;
  padding: 0.75rem 0 1rem;
}
.selector-group.open .selector-content {
  display: block;
}

/* ───────── INNER DROPDOWN ───────── */
.inner-dropdown {
  position: relative;
}
.inner-dropdown-header {
  border: 1px solid #ccc;
  border-radius: 4px;
  padding: 0.5rem 1rem;
  background: #fff;
  cursor: pointer;
  position: relative;
  font-size: 13px;
  color: #333;
}
.inner-dropdown-header::after {
  content: "▾";
  position: absolute;
  right: 1rem;
  top: 50%;
  transform: translateY(-50%);
  font-size: 30px;
  color: #999;
}
.inner-dropdown-header:hover {
  background-color: #f5f5f5;
}

/* ───────── OPTIONS PANEL ───────── */
.inner-dropdown-options {
  display: none;
  position: absolute;
  top: 100%;
  left: 0; right: 0;
  background: #fff;
  border: 1px solid #ccc;
  border-top: none;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  border-radius: 0 0 4px 4px;
  z-index: 100;
  max-height: 240px;
  overflow-y: auto;
}
.inner-dropdown-options.open {
  display: flex;
  flex-direction: column;
}

/* ───────── EACH OPTION ───────── */
.inner-dropdown-options .product-option {
  padding: 0.5rem 1rem;
  border-bottom: 1px solid #eee;
  font-size: 12.5px;
  cursor: pointer;
  transition: background 0.2s ease;
}
inner-dropdown .product-option:last-child {
  border-bottom: none;
}
.product-option:hover {
  background: #f9f9f9;
}

/* ───────── SELECTED STATE ───────── */
.inner-dropdown .product-option[data-selected-product="true"] {
  background-color: #000;
  color: #fff;
  font-weight: 600;
}
  .product-option.disabled {
  opacity: 0.5;
  pointer-events: none;
  cursor: not-allowed;
  background-color: #f8f8f8;
}
.product-option .out-of-stock-label {
  color: red;
  font-size: 0.8em;
}


</style>



<style>

  .btn-loader {
  font-size: 14px;
  margin-left: 10px;
}
 .product-section-quaote {
  overflow: hidden;
  word-wrap: break-word;
  word-break: break-word;
  max-width: 100%;
  padding-bottom: 16px;
  box-sizing: border-box;
}
  .product-section-quaote p {
    padding: 0;
}
  .single-quote {
    max-width: 90%;
    text-align: center;
    font-size: 14px;
    line-height: 22px;
    font-weight: 400;
    color: rgb(40, 40, 40);
    font-style: italic;
    padding: 19px 0px;
    margin: 0px auto;
}
.single-quote div{ 
  position:relative; 
}
  
  single-review-quote-left {
    position: absolute;
    left: -16px;
    top: -13px;
}
.single-review-quote-right {
    position: absolute;
    right: -10px;
    bottom: 10px;
    transform: rotate(180deg);
}

  .accordion-item {
    border-bottom: 1px solid #ddd;
  }

  .accordion-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    padding: 8px 0;
    font-weight: bold;
  }
.accordion-heading-wrapper {
    display: flex;
    align-items: center;
}
  .add_to_cart {
    margin-bottom: 30px;
}
  .accordion-content {
    display: none;
    padding: 10px 12px;
    background: #f9f9f9;
  }

  .accordion-toggle {
    font-size: 20px;
    font-weight: bold;
  }


  .tabs_nav_item_list {
    display: flex;
    gap: 24px;
    box-shadow: none;
  }
  .tabs_heading {
    background: none;
    border: none;
    padding: 0px 0px;
    cursor: pointer;
    color: #AAAAAA;
    font-size: 16px;
    position: relative;
  }
  .tab_nav {
    margin-top: 10px;
}
  .tabs_heading.active {
    color: #4A3F3C;
  }
  .tabs_heading.active::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    height: 2px;
    width: 100%;
    background-color: black;
  }
  .tab_content {
    padding: 10px 0;
  }
  .tab_content p{
      font-family: 'Pangram';
    font-style: normal;
    font-weight: 400;
    font-size: 14.4px;
    line-height: 20px;
    color: #492727;
    }
  .tab_content ul {
    margin-left: 0;
    padding-left: 1.25em;
}
  .tab_content ul li strong{
    font-weight:700;
  }
  .tab_content ul li{ color: #492727; font-weight:400; }
  .carousel-container {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .carousel {
    display: flex;
    transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    scroll-snap-type: x mandatory;
  }

  .carousel-slide {
    flex: 0 0 100%;
    scroll-snap-align: center;
    position: relative;
  }

  .carousel-slide img {
    width: 100%;
    /* height: 500px; */
    object-fit: cover;
    display: block;
  }

  .carousel-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);

    border: none;
    width: 50px;
    height: 50px;

    cursor: pointer;
    font-size: 18px;
    font-weight: bold;
    color: #333;
    z-index: 10;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;

  }
.carousel-btn svg.flickity-button-icon {
    width: 40px;
    height: 40px;

}
  .carousel-btn.next svg.flickity-button-icon {
    width: 40px;
    height: 40px;
}
  .carousel-btn:hover {

    transform: translateY(-50%) scale(1.1);
  }

  .carousel-btn:active {
    transform: translateY(-50%) scale(0.95);
  }

  .carousel-btn.prev {
    left: 15px; top:52%;
  }

  .carousel-btn.next {
    right: 15px;
  }

  .carousel-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: translateY(-50%) scale(1);
  }

.add_to_cart {
  width: 100%;
  text-align: center;
}

.add_to_cart button {
  width: 100%;
  background-color: rgb(222, 171, 91);
  color: white;
  padding: 15px 20px;
  border-radius: 10px;
  cursor: pointer;
  border: none;
  font-size: 16px; font-family: 'Pangram'; font-weight:600;
  display: flex;
  align-items: center;
  justify-content: center;
}

.add_to_cart button:disabled {
  cursor: not-allowed;
  background-color: rgb(232, 181, 101);
}

  .selected,
  .selectedType,
  .selectedOil {
    outline: 2px solid black;
    box-shadow: 0 0 0 2px;
  }

  .diffuser_title {
      font-weight: 400;
    font-size: 32px;
    line-height: 38px;
    margin-bottom: 0px;
    letter-spacing: -.8px;
    font-family: 'Pangram';
    color: #000;
  }
  .pdt-price-details{
    display: flex;
    justify-content: space-between;
  }
  .pdt-price{
    font-family: 'Pangram';
    font-style: normal;
    font-weight: 700;
    font-size: 25px;
    line-height: 120%;
    color: #4A3F3C;
    display:none;
  }
  .diffuser_container {
    width: 100%;
  }

  .diffuser_sub_container {
    display: flex;
    gap: 50px;
    padding: 0 40px;
    justify-content: center;
    align-items: flex-start;
    max-width: 1600px;
    margin: 0 auto;
  }
  .p-inner { max-width: 420px; }

  /* .left_section {
    border: 0.5px solid black;
  } */

  .right_section,
  .left_section {
    max-width: 668px;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  .left_section {
    position: sticky;
    top: 40px;
  }
  .right_section {
    padding: 0px; gap:10px;
  }
  .product-section-quaote{
    margin-top: 10px;
  }
  
  .product_varaiants_sub {
    display: flex;
    flex-direction: column;
    /* gap: 10px; */
    margin-top: 10px;
    margin-bottom: 16px;
  }
  .product_varaiants_sub h3 {
    margin-bottom: 10px;
}
  .diffuser_variants,
  .diffuser_oil_variants,
  .diffuser_type_variants {
    display: flex;
    flex-wrap: wrap;
    gap: 2px;
  }

  .diffuser_img_swatch,
  .diffuser_img_swatch_oil,
  .diffuser_img_swatch_type {
    width: 72px;
    height: 72px;
    border: 1px solid rgba(228, 223, 223, 1);
    background: white;
    cursor: pointer;
    transition: transform 0.2s ease;
  }
  .swatch-wrapper {
    position: relative;
    display: inline-block;
    margin: 5px;
  }

  .out-of-stock::after {
    content: '';
    position: absolute;
    background: rgba(228, 223, 223, 1);
    top: 0;
    left: 0;
    width: 139%;
    height: 1px;
    transform: rotate(45deg);
    transform-origin: top left;
    cursor: not-allowed;
  }
  .out-of-stock .diffuser_img_swatch {
    cursor: not-allowed;
    opacity: 0.6;
  }

  /* .left_section img {
    width: 100%;
    height: auto;
  } */

  /* all type of animation here */
  .diffuser_img_swatch:hover,
  .diffuser_img_swatch_oil:hover,
  .diffuser_img_swatch_type:hover {
    transform: scale(1.1);
  }
  .accordion-heading-wrapper img {
    width: 48px; margin-right:10px;
}

  /* Add this media query between your existing mobile styles */

  @media screen and (min-width: 1000px) {
    .right_section{ padding-top:50px; }
  }
@media (min-width: 1087px) and (max-width: 1306px) {
  .left_section {
    position: sticky;
    top: 54px;
    flex: 1;
    min-width: 500px;
  }
}
@media (min-width: 769px) and (max-width: 1086px) {
  .diffuser_sub_container {
    gap: 25px;
    padding: 30px 20px;
    align-items: flex-start;
  }
  
  .left_section {
    position: sticky;
    top: 54px;
    flex: 1;
    min-width: 300px;
  }
  
  .right_section {
    flex: 1;
    min-width: 320px;
    padding: 15px;
    max-width: none;
  }
  
  .carousel-container {
    max-width: 100%;
  }
  
  .diffuser_title {
    font-size: 28px;
    line-height: 34px;
  }
  
  .pdt-price {
    font-size: 22px;
  }
  
 
  .tabs_heading {
    padding: 2px 0px;
    font-size: 15px;
  }
  .tabs_nav_item_list {
    display: flex;
    gap: 15px;
    box-shadow: none;
}
  
  .product_varaiants_sub h3 {
    font-size: 16px;
  }
  
  .diffuser_variants,
  .diffuser_oil_variants,
  .diffuser_type_variants {
    justify-content: flex-start;
  }
  
  .accordion-header {
    padding: 10px 0px;
    font-size: 16px;
  }
  
  .accordion-content {
    padding: 12px;
    font-size: 14px;
  }
  
}
  @media (min-width:769px){
    .diffuser_container .carousel-btn svg{
      width:29px;
    }

  }
    .feature-list{
      margin-top:10px;
    }
  @media (max-width: 768px) {

    .discount-el {
      top: 140px;
      right: 39px;
      padding: 2px 7px;
      font-size: 9px;
    }
    .diffuser_sub_container {
    display: flex;
    flex-direction: column;
    padding: 24px;
    }
    .left_section {
    position: unset;
  }
    .diffuser_img_swatch, .diffuser_img_swatch_oil, .diffuser_img_swatch_type {
    width: 52px;
    height: 52px;
    border: 1px solid rgba(228, 223, 223, 1);
    background: white;
    cursor: pointer;
    transition: transform 0.2s ease;
}
    .right_section{ gap:5px; margin:0 auto; }
    span.pdt-price {
    font-size: 20px;
    line-height: 24px;
}
    .diffuser_sub_container {
    gap: 20px;
}
    .diffuser_title {
    font-weight: 400;
    font-size: 20px;
    line-height: 24px;
    margin-bottom: 0px;
    letter-spacing: -.4px;

}
    .product-section-quaote{ margin-top:20px; }
    .tab_nav {
  width: 100%;
  max-width: 100%;
  box-sizing: border-box;
  overflow-x: hidden; /* prevent horizontal scroll */
  padding: 10px;
}
    .tabs_nav_item_list {
   gap: 10px;
    }
    .tabs_heading {
    font-size: 14px;
  }
    .carousel-btn {
      width: 26px;
    height: 40px;
    }
    .tabs_heading {
      padding: 0px 0px;
    }
  }
  .circle-tags ul{ margin:0; padding:0; list-style:none; }
  .circle-tags ul span{ vertical-align:middle; }
  .circle-tags ul img {
    vertical-align: text-top;
    margin-right: 8px;
}
.circle-tags ul li {
    display: inline-block;
    border: 1px solid #4A3F3C;
    border-radius: 40px;
    padding: 3px 15px;
    margin-right: 8px;
    color: #4A3F3C;
    font-size: 14px;
    font-family: Muli, sans-serif;
}
  .circle-tags ul li:last-child{ margin-right:0px; }
  .feature-list ul {
    list-style: none;
    padding: 0;
    margin: 0;
}
  .feature-list ul li {
    display: inline-block;
    color: #4A3F3C;
    font-size: 14px;
    font-family: Muli, sans-serif;
    margin-bottom:8px;
}
  .feature-list ul span{ vertical-align:middle; }
  .feature-list ul img {
    vertical-align: text-top;
    margin-right: 8px;
}
  @media (min-width: 769px) and (max-width: 1086px) {
    .circle-tags ul li {
        padding: 3px 10px;
        margin-right: 2px;
        font-size: 12px;
    }

  }
    @media (max-width: 768px) {
      .circle-tags ul img {
        vertical-align: text-top;
        margin-right: 5px;
        max-width: 10px;
        margin-top: 2px;
      }
      .circle-tags ul li {
        padding: 3px 10px;
        margin-right: 5px;
        font-size: 11px;
      }
      .feature-list ul li {
        display: inline-block;
        color: #4A3F3C;
        font-size: 13px;
        margin-bottom: 8px;
      }
      .feature-list ul img {
        vertical-align: text-top;
        margin-right: 5px;
        max-width: 14px;
      }
    }
  .circle-tags {
    margin-bottom: 20px;
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    
    //sliding
    const carousel = document.querySelector('.carousel');
    const slides = document.querySelectorAll('.carousel-slide');
    const prevBtn = document.querySelector('.carousel-btn.prev');
    const nextBtn = document.querySelector('.carousel-btn.next');

    // Check if carousel elements exist
    if (!carousel || !slides.length || !prevBtn || !nextBtn) {
      console.log('Carousel elements not found');
      return;
    }

    let currentSlide = 0;
    const totalSlides = slides.length;

    console.log('Total slides:', totalSlides); // Debug log

    // Function to update carousel position
    function updateCarousel() {
      const translateX = -currentSlide * 100;
      carousel.style.transform = `translateX(${translateX}%)`;

      console.log('Current slide:', currentSlide, 'Transform:', translateX + '%'); // Debug log

      // Update active states
      slides.forEach((slide, index) => {
        slide.classList.toggle('active', index === currentSlide);
      });

      // Update button states
      prevBtn.disabled = currentSlide === 0;
      nextBtn.disabled = currentSlide === totalSlides - 1;

      // Add visual feedback for disabled buttons
      prevBtn.style.opacity = currentSlide === 0 ? '0.5' : '1';
      nextBtn.style.opacity = currentSlide === totalSlides - 1 ? '0.5' : '1';
    }

    // Function to go to specific slide
    function goToSlide(slideIndex) {
      if (slideIndex >= 0 && slideIndex < totalSlides) {
        currentSlide = slideIndex;
        updateCarousel();
      }
    }

    // Function to go to next slide
    function nextSlide() {
      console.log('Next slide clicked, current:', currentSlide); // Debug log
      if (currentSlide < totalSlides - 1) {
        currentSlide++;
        updateCarousel();
      }
    }

    // Function to go to previous slide
    function prevSlide() {
      console.log('Prev slide clicked, current:', currentSlide); // Debug log
      if (currentSlide > 0) {
        currentSlide--;
        updateCarousel();
      }
    }

    // Event listeners
    nextBtn.addEventListener('click', (e) => {
      e.preventDefault();
      nextSlide();
    });

    prevBtn.addEventListener('click', (e) => {
      e.preventDefault();
      prevSlide();
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight') {
        nextSlide();
      } else if (e.key === 'ArrowLeft') {
        prevSlide();
      }
    });

    // Touch/swipe support
    let startX = 0;
    let currentX = 0;
    let isDragging = false;

    carousel.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
      isDragging = true;
      carousel.style.transition = 'none';
    });

    carousel.addEventListener('touchmove', (e) => {
      if (!isDragging) return;

      currentX = e.touches[0].clientX;
      const diffX = currentX - startX;
      const currentTransform = -currentSlide * 100;
      const newTransform = currentTransform + (diffX / carousel.offsetWidth) * 100;

      carousel.style.transform = `translateX(${newTransform}%)`;
    });

    carousel.addEventListener('touchend', (e) => {
      if (!isDragging) return;
      isDragging = false;

      carousel.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';

      const diffX = currentX - startX;
      const threshold = 50; // minimum swipe distance

      if (Math.abs(diffX) > threshold) {
        if (diffX > 0) {
          prevSlide();
        } else {
          nextSlide();
        }
      } else {
        updateCarousel(); // snap back to current slide
      }
    });

    // Initialize carousel
    updateCarousel();

    //*************end of sliding**************\\


  //*************end add to cart **************\\

     //*************accordian featuer **************\\
    const headers = document.querySelectorAll('.accordion-header');
    headers.forEach((header) => {
      header.addEventListener('click', () => {
        const content = header.nextElementSibling;
        const toggle = header.querySelector('.accordion-toggle');

        const isOpen = content.style.display === 'block';

        // close all
        document.querySelectorAll('.accordion-content').forEach((el) => (el.style.display = 'none'));
        document.querySelectorAll('.accordion-toggle').forEach((t) => (t.textContent = '+'));

        // toggle current
        if (!isOpen) {
          content.style.display = 'block';
          toggle.textContent = '-';
        }
      });
    });
     //*************end accordian featuer **************\\

  });
</script>

{% schema %}
{
  "name": "mix-n-match",
  "class": "DIffuserClass",
  "settings": [
    {
      "type": "text",
      "id": "discount_code",
      "label": "Enter Discount-Code to be applied only through this Widget.",
      "default": "no-code"
    },
    {
      "type": "text",
      "id": "discount_percentage",
      "label": "Enter Discount-percentage to be applied.",
      "info": "used to fetch discounted price on ATC button.",
      "default": "0"
    },
    {
      "type": "richtext",
      "id": "section_title",
      "label": "Add Title"
    },
    {
      "type": "header",
      "content": "Circle Texts"
    },
    {
      "type": "text",
      "id": "circle_text",
      "label": "Comma Separated Features",
      "default": "Relieves stress, Better sleep, Relaxing"
    },
    {
      "type": "header",
      "content": "Feature content"
    },
    {
      "type": "text",
      "id": "feature_text",
      "label": "Double Comma Separated Features"
    },
    {
      "type": "richtext",
      "id": "section_description",
      "label": "Add Description"
    },
    {
      "type": "richtext",
      "id": "section-quote",
      "label": "Add Quote"
    },
    {
      "type": "textarea",
      "id": "carousel_images",
      "label": "Image URLs (comma-separated)",
      "info": "Add full image URLs, separated by commas"
    },
    {
      "type": "text",
      "id": "product-list-1-title",
      "label": "Enter Title for first selector",
    },
    {
      "type": "product_list",
      "id": "diffuser",
      "label": "Select Diffuser"
    },
    {
      "type": "text",
      "id": "product-list-2-title",
      "label": "Enter Title for second selector",
    },
    {
      "type": "product_list",
      "id": "single_oil_products",
      "label": "Select Single Oil Products (max 24)",
    },
    {
      "type": "text",
      "id": "product-list-3-title",
      "label": "Enter Title for third selector",
    },
    {
      "type": "product_list",
      "id": "blend_oil_products",
      "label": "Select Blend Oil Products (max 15)",
    },
    {
      "type": "richtext",
      "id": "section_description_product",
      "label": "Add Product Description"
    },
    
  ],
  "blocks": [
    {
      "type": "tab_item",
      "name": "Tab Item",
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "label": "Tab Heading"
        },
        {
          "type": "richtext",
          "id": "description",
          "label": "Tab Description"
        }
      ]
    },
    {
      "type": "accordian_item",
      "name": "Accordion Tab",
      "settings": [
        {
          "type": "text",
          "id": "accordian_item-heading",
          "label": "Accordion Heading"
        },
        {
          "type": "image_picker",
          "id": "accordian_item-icon",
          "label": "Optional Accordion Icon"
        },
        {
          "type": "richtext",
          "id": "accordian_item-description",
          "label": "Accordion Description"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Mix n Match"
    }
  ]
}
{% endschema %}
